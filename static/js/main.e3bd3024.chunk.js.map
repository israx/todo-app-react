{"version":3,"sources":["item.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","items","map","item","i","className","key","type","checked","completed","onChange","handleState","id","htmlFor","text","onClick","handleDelete","App","useState","JSON","parse","localStorage","getItem","setItems","setItem","handleSubmit","e","preventDefault","newItems","useEffect","console","log","window","stringify","onSubmit","placeholder","name","value","target","Date","now","parseInt","filteredItems","filter","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2LAuBeA,MArBf,SAAcC,GACZ,IAAMC,EAAQD,EAAMC,MAAMC,KAAI,SAACC,EAAMC,GAEnC,OACE,yBAAKC,UAAU,OAAOC,IAAKF,GACzB,2BACEG,KAAK,WACLC,QAASL,EAAKM,UACdC,SAAUV,EAAMW,YAChBC,GAAIT,EAAKS,GACTP,UAAU,oBAEZ,2BAAOQ,QAASV,EAAKS,IAAKT,EAAKW,MAC/B,4BAAQF,GAAIT,EAAKS,GAAIG,QAASf,EAAMgB,cAApC,SAMN,OAAO,yBAAKX,UAAU,mBAAmBJ,ICgE5BgB,MAjFf,WAAe,MAEaC,mBACxBC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,IAHjC,mBAENrB,EAFM,KAECsB,EAFD,OAMWL,mBAAS,CAC/BJ,KAAM,GACNF,GAAI,GACJH,WAAW,IATA,mBAMNN,EANM,KAMAqB,EANA,KAoCb,SAASC,EAAaC,GAGpB,GAFAA,EAAEC,iBAEgB,KAAdxB,EAAKW,KAAa,CACpB,IAAMc,EAAQ,sBAAO3B,GAAP,CAAcE,IAC5BoB,EAASK,GAGXJ,EAAQ,CAAEV,KAAM,KAgBlB,OALAe,qBAAU,WACRC,QAAQC,IAAI,WACZC,OAAOX,aAAaG,QAAQ,OAAQL,KAAKc,UAAUhC,MAClD,CAACA,IAGF,yBAAKI,UAAU,YACb,0BAAMA,UAAU,OAAO6B,SAAUT,GAC/B,2BACElB,KAAK,OACL4B,YAAY,WACZC,KAAK,YACLC,MAAOlC,EAAKW,KACZJ,SAvDR,SAAsBgB,GAAI,IAAD,EACoBA,EAAEY,OAA/BD,GADS,EACf9B,KADe,EACT8B,OADS,EACF7B,QADE,EACO4B,KADP,EACaxB,GAEpCY,EAAQ,CACNV,KAAMuB,EACNzB,GAAI2B,KAAKC,MACT/B,WAAW,OAmDT,4BAAQyB,SAAUT,GAAlB,QAEF,kBAAC,EAAD,CACEd,YAlDN,SAAqBe,GACnBH,EACEtB,EAAMC,KAAI,SAACC,GACT,OAAIA,EAAKS,KAAO6B,SAASf,EAAEY,OAAO1B,KAChCT,EAAKM,UAAYiB,EAAEY,OAAO9B,QAEnBL,GAEFA,OA2CPF,MAAOA,EACPe,aA5BN,SAAsBU,GACpB,IAAMd,EAAK6B,SAASf,EAAEY,OAAO1B,IAEvB8B,EAAgBzC,EAAM0C,QAAO,SAACxC,GAAD,OAAUA,EAAKS,KAAOA,KACzDW,EAASmB,QC3COE,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.e3bd3024.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Item(props) {\n  const items = props.items.map((item, i) => {\n    //console.log(item.completed);\n    return (\n      <div className=\"item\" key={i}>\n        <input\n          type=\"checkbox\"\n          checked={item.completed}\n          onChange={props.handleState}\n          id={item.id}\n          className=\"custom-checkbox\"\n        />\n        <label htmlFor={item.id}>{item.text}</label>\n        <button id={item.id} onClick={props.handleDelete}>\n          X\n        </button>\n      </div>\n    );\n  });\n  return <div className=\"items-container\">{items}</div>;\n}\nexport default Item;\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Item from \"./item\";\n\nfunction App() {\n  //Pull out data from localstorage if null then it will take an empty array\n  const [items, setItems] = useState(\n    JSON.parse(localStorage.getItem(\"item\")) || []\n  );\n\n  const [item, setItem] = useState({\n    text: \"\",\n    id: \"\",\n    completed: false,\n  });\n\n  //Event Handlers\n  function handleChange(e) {\n    const { type, value, checked, name, id } = e.target;\n\n    setItem({\n      text: value,\n      id: Date.now(),\n      completed: false,\n    });\n  }\n\n  function handleState(e) {\n    setItems(\n      items.map((item) => {\n        if (item.id === parseInt(e.target.id)) {\n          item.completed = e.target.checked;\n\n          return item;\n        }\n        return item;\n      })\n    );\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (item.text !== \"\") {\n      const newItems = [...items, item];\n      setItems(newItems);\n    }\n\n    setItem({ text: \"\" });\n  }\n\n  function handleDelete(e) {\n    const id = parseInt(e.target.id);\n\n    const filteredItems = items.filter((item) => item.id !== id);\n    setItems(filteredItems);\n  }\n\n  //Local Storage\n  useEffect(() => {\n    console.log(\"working\");\n    window.localStorage.setItem(\"item\", JSON.stringify(items));\n  }, [items]);\n\n  return (\n    <div className=\"main-app\">\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Add Todo\"\n          name=\"todo-text\"\n          value={item.text}\n          onChange={handleChange}\n        />\n        <button onSubmit={handleSubmit}>Add</button>\n      </form>\n      <Item\n        handleState={handleState}\n        items={items}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}